<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teachable Machine Image Model</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f9;
            color: #333;
            margin: 0;
            padding: 20px;
        }

        h1 {
            color: #4CAF50;
        }

        .container {
            margin-top: 20px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        button {
            padding: 10px 20px;
            margin-top: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        button:hover {
            background-color: #45a049;
        }

        #webcam-container {
            margin-top: 20px;
        }

        #label-container div {
            padding: 5px;
            margin: 5px 0;
            background-color: #f0f8ff;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <h1>Teachable Machine Image Model</h1>
    <p>Click "Start" to activate your webcam and run the model to predict image classifications.</p>
    <div class="container">
        <button type="button" onclick="init()">Start</button>
        <div id="webcam-container"></div>
        <div id="label-container"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
    <script>
        const URL = "./my_model/"; // Update this path with your model directory

        let model, webcam, labelContainer, maxPredictions;

        // Load the image model and setup the webcam
        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            // Load the model and metadata
            model = await tmImage.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();

            // Setup webcam
            const flip = true; // Flip the webcam horizontally
            webcam = new tmImage.Webcam(300, 300, flip); // Set width, height, and flip
            await webcam.setup(); // Request access to the webcam
            await webcam.play();
            window.requestAnimationFrame(loop);

            // Append webcam to container
            document.getElementById("webcam-container").appendChild(webcam.canvas);

            // Prepare label container
            labelContainer = document.getElementById("label-container");
            for (let i = 0; i < maxPredictions; i++) {
                labelContainer.appendChild(document.createElement("div"));
            }
        }

        // Loop through each frame for predictions
        async function loop() {
            webcam.update(); // Update the webcam frame
            await predict(); // Run predictions
            window.requestAnimationFrame(loop); // Continue loop
        }

        // Run the model on the webcam feed
        async function predict() {
            const predictions = await model.predict(webcam.canvas);
            for (let i = 0; i < maxPredictions; i++) {
                const classPrediction = `${predictions[i].className}: ${(predictions[i].probability * 100).toFixed(2)}%`;
                labelContainer.childNodes[i].innerHTML = classPrediction;
            }
        }
    </script>
</body>
</html>
